{"version":3,"sources":["components/data.js","components/ContainerFluid.js","App.js","serviceWorker.js","index.js"],"names":["colors","ContainerFluid","props","state","color","handleClick","bind","className","style","backgroundColor","this","onClick","id","changeColor","event","target","index","Math","floor","random","length","randomColor","setState","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAeeA,EAfF,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WCyDaC,E,kDAjEb,WAAYC,GAAQ,IAAD,8BACjB,gBACKC,MAAQ,CACXC,MAAO,QAET,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALF,E,qDASjB,OACE,yBACEC,UAAU,yBACVC,MACE,CAAEC,gBAAgB,GAAD,OAAKC,KAAKP,MAAMC,QAEnCO,QAAUD,KAAKL,aAEf,yBAAKE,UAAU,gCACb,yBAAKA,UAAU,mBACb,0BAAMA,UAAU,8BACd,yBAAKK,GAAG,YAAYL,UAAU,iCAC5B,yBAAKA,UAAU,OACb,+BAQF,yBAAKA,UAAU,gCACb,4BAAQK,GAAG,YAAYL,UAAU,uCAAjC,gBAKN,4BAAQA,UAAU,yCAChB,6C,0CASVG,KAAKG,gB,kCAGKC,GACc,cAApBA,EAAMC,OAAOH,IACfF,KAAKG,gB,oCAKP,IAAIG,EAAQC,KAAKC,MAAMD,KAAKE,SAAWnB,EAAOoB,QAC1CC,EAAcrB,EAAOgB,GAEzBN,KAAKY,SAAS,CACZlB,MAAOiB,Q,GA7DgBE,IAAMC,WCSpBC,E,uKANX,OACE,kBAAC,EAAD,U,GAHYF,IAAMC,WCQJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c276af9e.chunk.js","sourcesContent":["let colors = [\r\n  '#16a085',\r\n  '#27ae60',\r\n  '#2c3e50',\r\n  '#f39c12',\r\n  '#e74c3c',\r\n  '#9b59b6',\r\n  '#FB6964',\r\n  '#342224',\r\n  '#472E32',\r\n  '#BDBB99',\r\n  '#77B1A9',\r\n  '#73A857'\r\n];\r\n\r\nexport default colors;","import React from 'react';\r\nimport colors from './data';\r\n\r\nclass ContainerFluid extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      color: 'blue'\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"container-fluid vh-100\"\r\n        style={ \r\n          { backgroundColor: `${this.state.color}` }\r\n        }\r\n        onClick={ this.handleClick }\r\n      >\r\n        <div className=\"row h-100 align-items-center\">\r\n          <div className=\"container-fluid\">\r\n            <main className=\"row justify-content-center\">\r\n              <div id=\"quote-box\" className=\"col-xl-6 p-4 rounded bg-white\">\r\n                <div className=\"row\">\r\n                  <div />\r\n                  \r\n                  {/* <blockquote className=\"col blockquote\">\r\n                    <p id=\"text\" className=\"text-center\"></p>\r\n                    <footer id=\"author\" className=\"blockquote-footer text-right\"></footer>\r\n                  </blockquote> */}\r\n                </div>        \r\n                \r\n                <div className=\"row justify-content-end px-3\">\r\n                  <button id=\"new-quote\" className=\"col-xl-5 btn btn-default text-white\">New quote</button>\r\n                </div>\r\n              </div>\r\n            </main>\r\n          \r\n            <footer className=\"row justify-content-center text-white\">\r\n              <p>by taras</p>\r\n            </footer>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.changeColor();\r\n  }\r\n\r\n  handleClick(event) {\r\n    if (event.target.id === 'new-quote') {\r\n      this.changeColor();\r\n    }\r\n  }\r\n\r\n  changeColor() {\r\n    let index = Math.floor(Math.random() * colors.length),\r\n        randomColor = colors[index];\r\n\r\n    this.setState({\r\n      color: randomColor\r\n    });\r\n  }\r\n}\r\n\r\nexport default ContainerFluid;","import React from 'react';\nimport './App.css';\nimport ContainerFluid from './components/ContainerFluid';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <ContainerFluid />\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}